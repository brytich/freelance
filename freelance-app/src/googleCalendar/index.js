const fs = require("fs");
const { google } = require("googleapis");
require("dotenv").config();

const SCOPES = [
    "https://www.googleapis.com/auth/gmail.modify",
    "https://www.googleapis.com/auth/calendar"
];

const credentials = JSON.parse(fs.readFileSync("credentials.json"));
const { client_secret, client_id, redirect_uris } = credentials.installed;
const auth = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);

try {
    auth.setCredentials(JSON.parse(fs.readFileSync("token.json")));
    console.log("üîë Token charg√© avec les permissions :", auth.credentials.scope);
} catch (error) {
    console.error("‚ùå Erreur lors du chargement du token.");
    process.exit(1);
}

const gmail = google.gmail({ version: "v1", auth });
const calendar = google.calendar({ version: "v3", auth });

/**
 * ‚úÖ Gestion des emails d√©j√† trait√©s
 */
const PROCESSED_EMAILS_FILE = "processedEmails.json";
let processedEmails = new Set();

function loadProcessedEmails() {
    if (fs.existsSync(PROCESSED_EMAILS_FILE)) {
        try {
            processedEmails = new Set(JSON.parse(fs.readFileSync(PROCESSED_EMAILS_FILE, "utf8")));
            console.log(`üìÇ ${processedEmails.size} emails d√©j√† trait√©s charg√©s.`);
        } catch (error) {
            console.error("‚ö†Ô∏è Erreur de lecture de processedEmails.json, r√©initialisation.");
            processedEmails = new Set();
        }
    }
}

function saveProcessedEmails() {
    try {
        fs.writeFileSync(PROCESSED_EMAILS_FILE, JSON.stringify(Array.from(processedEmails), null, 2));
        console.log(`üìÇ Emails trait√©s sauvegard√©s.`);
    } catch (error) {
        console.error("‚ö†Ô∏è Erreur lors de la sauvegarde :", error);
    }
}

// Charger au d√©marrage
loadProcessedEmails();

async function eventExists(clientEmail, date, heure) {
    try {
        const startDateTime = new Date(`${date}T${heure}:00`).toISOString();
        const endDateTime = new Date(new Date(startDateTime).getTime() + 60 * 60 * 1000).toISOString();

        const res = await calendar.events.list({
            calendarId: "primary",
            timeMin: startDateTime,
            timeMax: endDateTime,
            maxResults: 1,
            singleEvents: true
        });

        return res.data.items.some(event => event.attendees?.some(attendee => attendee.email === clientEmail));
    } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification de l'√©v√©nement :", error);
        return false;
    }
}
async function createCalendarEvent(date, heure, clientEmail) {
    try {
        const startDateTime = new Date(`${date}T${heure}:00`);
        const endDateTime = new Date(startDateTime.getTime() + 60 * 60 * 1000); // Dur√©e de 1h

        const event = {
            summary: "üìå Rendez-vous QA",
            description: `√âchange avec ${clientEmail} sur un projet de QA.`,
            start: { dateTime: startDateTime.toISOString(), timeZone: "Europe/Paris" },
            end: { dateTime: endDateTime.toISOString(), timeZone: "Europe/Paris" },
            attendees: [{ email: clientEmail }],
            conferenceData: { createRequest: { requestId: `meet-${Date.now()}` } },
        };

        const res = await calendar.events.insert({
            calendarId: "primary",
            resource: event,
            conferenceDataVersion: 1,
        });

        console.log("‚úÖ √âv√©nement cr√©√© avec succ√®s :", res.data.htmlLink);
        return true;
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de l'√©v√©nement :", error);
        return false;
    }
}

/**
 * ‚úÖ V√©rifier les emails non lus
 */
async function checkEmails() {
    try {
        console.log("üì¨ V√©rification des emails en cours...");

        const res = await gmail.users.messages.list({
            userId: "me",
            maxResults: 5,
            labelIds: ["UNREAD"] // üîπ Ne traiter que les emails non lus
        });

        const messages = res.data.messages || [];

        for (let msg of messages) {
            if (processedEmails.has(msg.id)) {
                console.log(`üîÑ Email ${msg.id} d√©j√† trait√©, on ignore.`);
                continue;
            }

            const email = await gmail.users.messages.get({ userId: "me", id: msg.id });
            const subject = email.data.payload.headers.find(h => h.name === "Subject")?.value || "";

            console.log(`üì© Email trouv√© avec sujet: "${subject}"`);

            if (subject.toLowerCase().includes("rdv") || subject.toLowerCase().includes("rendez-vous")) {
                console.log(`üì© Demande de RDV d√©tect√©e !`);

                const emailBody = extractBody(email.data.payload);
                console.log("üìú Contenu brut de l'email :", emailBody);

                if (!emailBody) {
                    console.log("‚ö†Ô∏è Impossible d'extraire le contenu.");
                    continue;
                }

                const { date, heure, clientEmail } = extractRdvDetails(emailBody);
                console.log(`üîç Extraction : Date: ${date}, Heure: ${heure}, Email: ${clientEmail}`);

                if (date && heure && clientEmail) {
                    console.log(`üìÖ V√©rification de l'√©v√©nement existant pour ${clientEmail} √† ${date} ${heure}`);

                    const existingEvent = await eventExists(clientEmail, date, heure);
                    if (existingEvent) {
                        console.log(`‚ö†Ô∏è L'√©v√©nement existe d√©j√†. Pas de nouvelle cr√©ation.`);
                        processedEmails.add(msg.id);
                        saveProcessedEmails();
                        await markEmailAsRead(msg.id);
                        continue;
                    }

                    console.log(`üìÖ Cr√©ation d'un nouvel √©v√©nement.`);
                    processedEmails.add(msg.id);  // Marquer comme trait√© avant cr√©ation pour √©viter les doublons en cas d'√©chec
                    saveProcessedEmails();
                    const eventCreated = await createCalendarEvent(date, heure, clientEmail);

                    if (eventCreated) {
                        await markEmailAsRead(msg.id);
                    } else {
                        console.log(`‚ùå √âchec de cr√©ation de l'√©v√©nement. L'email ne sera pas marqu√© comme trait√©.`);
                        processedEmails.delete(msg.id);  // Enlever de la liste des trait√©s si l'√©v√©nement a √©chou√©
                        saveProcessedEmails();
                    }
                } else {
                    console.log("‚ö†Ô∏è Informations de RDV manquantes.");
                }
            }
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des emails :", error);
    }
}

/**
 * ‚úÖ Marquer l'email comme lu
 */
async function markEmailAsRead(emailId) {
    try {
        await gmail.users.messages.modify({
            userId: "me",
            id: emailId,
            removeLabelIds: ["UNREAD"]
        });
        console.log(`üì© Email marqu√© comme lu.`);
    } catch (error) {
        console.error("‚ùå Erreur lors du marquage de l'email comme lu :", error);
    }
}

/**
 * ‚úÖ Extraction du corps du mail
 */
function extractBody(payload) {
    try {
        if (payload.body && payload.body.data) {
            return Buffer.from(payload.body.data, "base64").toString("utf-8");
        }

        if (payload.parts) {
            for (let part of payload.parts) {
                if (part.mimeType === "text/plain") {
                    return Buffer.from(part.body.data, "base64").toString("utf-8");
                }
            }
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de l'extraction du corps :", error);
    }
    return null;
}

/**
 * ‚úÖ Extraction des d√©tails du RDV
 */
function extractRdvDetails(text) {
    const dateRegex = /Date\s*:\s*(\d{4}-\d{2}-\d{2})/i;
    const heureRegex = /Horaire\s*:\s*(\d{2}:\d{2})/i;
    const emailRegex = /Email du client\s*:\s*([\w.-]+@[\w.-]+\.\w+)/i;

    const dateMatch = text.match(dateRegex);
    const heureMatch = text.match(heureRegex);
    const emailMatch = text.match(emailRegex);

    return {
        date: dateMatch ? dateMatch[1] : null,
        heure: heureMatch ? heureMatch[1] : null,
        clientEmail: emailMatch ? emailMatch[1] : null,
    };
}

// ‚úÖ Ex√©cuter toutes les 10 secondes
setInterval(checkEmails, 10000);
